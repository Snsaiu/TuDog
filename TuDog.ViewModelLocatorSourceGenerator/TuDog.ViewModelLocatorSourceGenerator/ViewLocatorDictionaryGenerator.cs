using Microsoft.CodeAnalysis;

using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

using TuDog.IocAutoRegisterSourceGenerator.Models;

namespace TuDog.IocAutoRegisterSourceGenerator;

[Generator(LanguageNames.CSharp)]
public class ViewLocatorDictionaryGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var projectFile = context.AdditionalTextsProvider
            .Where(x => x.Path.EndsWith(".csproj"))
            .Select((x, _) => x.GetText()).Combine(context.CompilationProvider);
        var content = projectFile.ToString();

        context.RegisterSourceOutput(projectFile, (context, proj) =>
        {


            if ((proj.Left is null))
            {
                return;
            }
            var content = proj.ToString();


            string pattern = @"<ScanAssemblyRule>(.*?)<\/ScanAssemblyRule>";

            var rule = "*";
            var math = Regex.Match(content, pattern);
            if (math.Success)
            {
                rule = math.Groups[1].Value;
            }

            var models = DiscoverModel(proj.Right, rule);
            // Ð´ÎÄ¼þ
            if (models.Any())
            {
                var appNamespace = proj.Right.AssemblyName;
                if (string.IsNullOrEmpty(appNamespace))
                    return;
                var source = GenerateSource(models);
                context.AddSource("ViewLocatorBase.g.cs", source);
            }
        });


    }


    private static string GenerateSource(IEnumerable<VmModel> models)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("namespace TuDog.ViewLocators");
        sb.AppendLine("{");
        sb.AppendLine("public abstract partial class ViewLocatorBase {");

        sb.AppendLine("private partial System.Collections.Generic.IDictionary<System.Type, System.Func<Avalonia.Controls.Control>> InitControlDictionaryControls(){");
        sb.AppendLine("var dictionary = new System.Collections.Generic.Dictionary<System.Type, System.Func<Avalonia.Controls.Control>>();");

        foreach (var model in models)
        {
            sb.AppendLine($"dictionary.Add(typeof({model.ViewModelFullName}), () => new {model.ViewFullName}());");
        }
        sb.AppendLine("return dictionary; }");

        sb.AppendLine("     }");
        sb.AppendLine(" }");
        return sb.ToString();
    }



    private static IEnumerable<VmModel> DiscoverModel(Compilation compilation, string assemblyCondition)
    {

        var result = new List<VmModel>();

        var main = FindClassesByAttribute(compilation.GlobalNamespace);
        if (main.Any())
            result.AddRange(main);
        return result;
    }

    private static IEnumerable<VmModel> FindClassesByAttribute(IAssemblySymbol assembly)
    {
        return FindClassesByAttribute(assembly.GlobalNamespace);
    }

    private static IEnumerable<VmModel> FindClassesByAttribute(INamespaceSymbol symbol)
    {
        var result = new List<VmModel>();

        foreach (var type in GetNamespaceTypes(symbol))
        {

            if (type is { TypeKind: TypeKind.Class, IsAbstract: false } and var item)
            {
                if (item.GetAttributes().Length == 0)
                    continue;

                var att = item.GetAttributes().Select(x => x.AttributeClass?.OriginalDefinition.ToDisplayString());

                if (att is null)
                    continue;

                {
                    if (item.GetAttributes().FirstOrDefault(x => x.AttributeClass?.OriginalDefinition.ToDisplayString() == "TuDog.IocAttribute.RegisterAttribute") is { } find)
                    {
                        var model = new VmModel();

                        foreach (var x in find.ConstructorArguments)
                        {
                            if (x.Type?.ToDisplayString() != "Microsoft.Extensions.DependencyInjection.ServiceLifetime")
                            {
                                continue;
                            }
                            if (item is not ISymbol symbolInfo)
                            {
                                continue;
                            }
                            if (!symbolInfo.Name.EndsWith("ViewModel"))
                            {
                                continue;
                            }

                            model.ViewModelFullName = item.ToDisplayString();
                            model.ViewFullName = model.ViewModelFullName.Replace("ViewModels", "Views").Replace("ViewModel", "View");
                            result.Add(model);
                            continue;
                        }
                    }
                }
            }

        }

        return result;
    }


    private static IEnumerable<INamedTypeSymbol> GetNamespaceTypes(INamespaceSymbol namespaceSymbol)
    {
        foreach (var member in namespaceSymbol.GetMembers())
        {
            if (member is INamespaceSymbol namespaceMember)
            {
                foreach (var nestedType in GetNamespaceTypes(namespaceMember))
                {
                    yield return nestedType;
                }
            }
            else if (member is INamedTypeSymbol typeMember)
            {
                yield return typeMember;
            }
        }
    }
}